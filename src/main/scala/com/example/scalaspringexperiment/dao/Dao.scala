package com.example.scalaspringexperiment.dao

import cats.*
import cats.effect.*
import com.example.scalaspringexperiment.entity.DomainEntity
import doobie.*
import doobie.implicits.*
import doobie.util.fragment.*
import cats.data.Chain
import org.slf4j.Logger
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.stereotype.Service

import scala.compiletime.uninitialized

object DaoUtils {

  /**
   * This is a workaround to adjust the properties of a Fragment.
   * Since Fragment is final and its sql and elems properties are protected, we're forced to use reflection here
   * @param entity
   * @param r
   * @param w
   * @tparam T
   * @return
   */
  def insertValuesFr[T](
    entity: T,
    tableInfo: TableInfo[T]
  )(
    implicit r: Read[T],
    w: Write[T]
  ): Fragment = {
    val f = fr0"$entity"
    val fragmentClass = classOf[Fragment]

    def getField[A](name: String): A = {
      val field = fragmentClass.getDeclaredField(name)
      field.setAccessible(true)
      field.get(f).asInstanceOf[A]
    }

    val sql: String = getField[String]("sql")
    val elems: Chain[Elem] = getField[Chain[Elem]]("elems")

    val mask: Seq[Boolean] = tableInfo.columns.map(_.autoGenerated)

    val filteredElems = elems.toList.zip(mask).collect {
      case (e, false) => e
    }

    val filteredSql = filteredElems.map(_ => "?").mkString(",")
    Fragment(filteredSql, filteredElems)
  }
}

//@Service
//class Persistence {
//
//  @Autowired
//  var ds: Resource[IO, DataSourceTransactor[IO]] = uninitialized
//
//}

trait Dao[T <: DomainEntity] {
  val logger: Logger
  val ds: Resource[IO, DataSourceTransactor[IO]]
  val tableInfo: TableInfo[T]

  implicit val reader: Read[T]
  implicit val writer: Write[T]

  // TODO - figure out how to get this working again
  // implicit val logHandler: LogHandler = LogHandler(evt => logger.info(evt.toString))

  def insert(
    model: T
  ): IO[T] = ds.use { xa =>
    val theTableName = Fragment.const0(tableInfo.table.name)
    val theInsertCols = Fragment.const0(tableInfo.insertColumnNames.mkString(","))
    val insertValues = DaoUtils.insertValuesFr(model, tableInfo)
    for {
      sql <- IO(sql"INSERT INTO $theTableName ($theInsertCols) VALUES ($insertValues)")
      query <- IO(sql.update.withUniqueGeneratedKeys[T](tableInfo.columnNames *))
      result <- query.transact(xa)
    } yield result
  }

  // TODO
  def update(
    model: T
  ): IO[Option[T]] = ???

  def delete(
    model: T
  ): IO[Option[T]] = ds.use { xa =>
    val q =
      sql"""
DELETE FROM ${tableInfo.table.name}
WHERE id = ${model.id}
"""
    for {
      id <- q.update.run.transact(xa)
      f <- findById(id)
    } yield f
  }

  def findById(
    id: Long
  ): IO[Option[T]] = ds.use { xa =>
    (Fragment.const(s"select * from ${tableInfo.table.name} where id = ") ++ fr"$id LIMIT 1").query[T]
      .option
      .transact(xa)
  }
}
